// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","windows"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Persisted threads for forced‐archiving
model ThreadArchive {
  /// MongoDB ObjectId
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Discord thread ID
  threadId    String
  /// When to archive this thread
  archiveAt   DateTime
  /// Set to true once we’ve archived it
  archived    Boolean  @default(false)
  endNotified Boolean  @default(false)
}

model User {
  /// Prisma’s built-in primary key; you can also use `userID` as @id if you prefer
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userName String @unique
  userID   String @unique
  nickName String @unique

  /// Store whichever Land this user belongs to as a plain string…
  land String

  totalPoints Int    @default(0)
  serverID    String

  /// If you want to track events per user as an array of IDs or JSON, you could do:
  /// events      String[] @default([])
}

model Land {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String  @unique
  roleID       String  @unique
  emojiID      String  @unique
  totalPoints  Int     @default(0)
  triviaPoints Int     @default(0)
  special      Boolean
  serverID     String

  @@map("lands") // ← tell Prisma to use the existing "lands" collection
}
