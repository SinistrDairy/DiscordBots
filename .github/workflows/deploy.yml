name: Deploy Discord Bots

on:
  workflow_run:
    workflows: ["Release Discord Bots"]
    types: [completed]
  workflow_dispatch:
    inputs:
      force:
        description: "Force build/upload/start for all bots (bootstrap)"
        required: false
        default: "false"

env:
  REMOTE_ROOT: /var/www/discord-bots/DiscordBots

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      genie:  ${{ steps.filter.outputs['genie-bot'] }}
      trivia: ${{ steps.filter.outputs['triviabot'] }}
      opie:   ${{ steps.filter.outputs['opie-bot'] }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            genie-bot:
              - 'genie-bot/**'
            triviabot:
              - 'triviabot/**'
            opie-bot:
              - 'opie-bot/**'

  deploy:
    needs: filter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - bot: genie-bot
            pretty: Genie
            changed: ${{ needs.filter.outputs.genie }}
          - bot: triviabot
            pretty: Russell
            changed: ${{ needs.filter.outputs.trivia }}
          - bot: opie-bot
            pretty: Opie
            changed: ${{ needs.filter.outputs.opie }}

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/heads/main

      - name: Setup Node.js, pnpm & jq
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get update
          sudo apt-get install -y nodejs jq
          npm i -g pnpm

      - name: Build (only when changed or forced)
        if: ${{ matrix.changed == 'true' || github.event.inputs.force == 'true' }}
        run: |
          cd ${{ matrix.bot }}
          pnpm install
          pnpm build

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: Trust VPS host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Rsync build to server (changed or forced)
        if: ${{ matrix.changed == 'true' || github.event.inputs.force == 'true' }}
        run: |
          set -euo pipefail
          REMOTE_BASE="$REMOTE_ROOT/${{ matrix.bot }}"
          ssh root@${{ secrets.VPS_HOST }} "mkdir -p \"$REMOTE_BASE\""
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.sern' \
            --exclude '.github' \
            --exclude '.env' \
            ./${{ matrix.bot }}/ \
            root@${{ secrets.VPS_HOST }}:"$REMOTE_BASE"

      - name: Ensure PM2 process is up (start if missing, correct cwd & env)
        run: |
          set -euo pipefail
          NAME="${{ matrix.bot }}"
          CWD="$REMOTE_ROOT/$NAME"
          ENTRY="$CWD/dist/index.js"
      
          ssh root@${{ secrets.VPS_HOST }} bash -lc "
            set -euo pipefail
            export NVM_DIR=\$HOME/.nvm; [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\" || true
            command -v pm2 >/dev/null || { echo 'pm2 not in PATH'; exit 1; }
      
            NAME='$NAME'; CWD='$CWD'; ENTRY='$ENTRY'
            [ -f \"\$ENTRY\" ] || { echo '❌ Missing '\$ENTRY'. Build/rsync or SFTP not in place.'; exit 1; }
      
            # Load .env from project root while running dist/index.js
            export DOTENV_CONFIG_PATH=\"\$CWD/.env\"
            export NODE_ENV=production
      
            # Robust existence check: exit code 0 if PM2 knows the name
            if pm2 status \"\$NAME\" >/dev/null 2>&1; then
              STATUS=\$(pm2 info \"\$NAME\" | awk -F': ' '/status/ {print \$2; exit}' | tr -d '\r')
              echo \"\$NAME status: \${STATUS:-unknown}\"
              pm2 restart \"\$NAME\" --update-env --cwd \"\$CWD\"
            else
              echo 'Starting for the first time...'
              # Start; if PM2 says "already launched" (race/different check), just restart it.
              pm2 start \"\$ENTRY\" --name \"\$NAME\" --cwd \"\$CWD\" \
                --node-args \"-r dotenv/config\" --update-env \
              || { echo 'Start said already launched. Restarting existing process…'; pm2 restart \"\$NAME\" --update-env --cwd \"\$CWD\"; }
            fi
      
            pm2 save
            pm2 ls --no-color || true
          "

      - name: Notify Discord of Deployment (changed or forced)
        if: ${{ matrix.changed == 'true' || github.event.inputs.force == 'true' }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          VERSION=$(jq -r .version ./${{ matrix.bot }}/package.json)
          PAYLOAD=$(jq -nc --arg bot "${{ matrix.pretty }}" --arg ver "$VERSION" \
                    '{content: ("# Production Notice\n **\($bot) v\($ver)** has been deployed to production")}')
          curl -s -o /dev/null -w "%{http_code}" \
               -X POST "$DISCORD_WEBHOOK_URL" \
               -H 'Content-Type: application/json' \
               -d "$PAYLOAD"

  diagnose:
    needs: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bot: [genie-bot, triviabot, opie-bot]
    steps:
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: Trust VPS host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Collect PM2 & app logs
        run: |
          set -euo pipefail
          NAME="${{ matrix.bot }}"
          BASE="$REMOTE_ROOT/$NAME"
          REMOTE_LOG_DIR="/root/.pm2/logs"
          TMP="/tmp/${NAME}-diag"

          ssh root@${{ secrets.VPS_HOST }} bash -lc "
            set -euo pipefail
            mkdir -p $TMP
            echo '===== PM2 LS ====='     >  $TMP/pm2-ls.txt
            pm2 ls --no-color           >> $TMP/pm2-ls.txt || true

            echo '===== PM2 INFO ====='   >  $TMP/${NAME}-pm2-info.txt
            pm2 info $NAME --silent --no-color >> $TMP/${NAME}-pm2-info.txt || true

            {
              echo BASE: $BASE
              [ -d \"$BASE\" ] && echo dir: OK || echo dir: MISSING
              [ -f \"$BASE/dist/index.js\" ] && echo entry: OK || echo entry: MISSING
              [ -f \"$BASE/.env\" ] && echo envfile: PRESENT || echo envfile: MISSING
            } > $TMP/${NAME}-checks.txt

            for kind in out err; do
              f=\"$REMOTE_LOG_DIR/${NAME}-${kind}.log\"
              if [ -f \"\$f\" ]; then
                tail -n 300 \"\$f\" > \"$TMP/${NAME}-${kind}.log\"
              else
                echo 'no file' > \"$TMP/${NAME}-${kind}.log\"
              fi
            done

            tar -C /tmp -czf /tmp/${NAME}-diag.tgz ${NAME}-diag
          "

          scp root@${{ secrets.VPS_HOST }}:/tmp/${NAME}-diag.tgz ./

      - name: Upload diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bot }}-diagnostics
          path: ./*.tgz
